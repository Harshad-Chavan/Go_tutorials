// very go file must have a package at the start
// code must be organised in packages
// main specifies that this package will be the entry point of the application we are building
package main

// fmt is a built in package from which we use the print fucntion
import "fmt"

// must be named main. go will call and execute this funciton when program starts
func main() {
	fmt.Print("Hello World")

}

// one module consists of multiple packages
// -go build- command enabales us to create a executable

// intilly go deos not recognise the folder as a module for that we have to run command
// go mod init <path or name>
// post module creation we can use go build to create executable file
// ./first-app

// libraries are not executbales so they dont need to have a main fucntion

// statically type take care of data types

// go run . command executes the module

// shortcut ti assign and declare a variable where type will be infered by go
// variableName := <some_value>

// while delcaring a varibale it is neccessar to assign the datatype 
var some_variable float64/int64

// use back tick for muliti line strings


// there is no while loop in go only for loop
// use the for loop in such a way that it becomes infinite


// to write something to a file first it needt ot be converted to string
// and then to a collection of bytes

// panic ois used to fail the programe with some exception trace


// files belong to a package.. if multiple files belong the same pacakge the funcs can be used

// imports are not shared among files in a pakacge

// only fucntion/vairbale/const names that start with a capitla letter are available in other pacakges

// used go mod tidy resolve the package no provided issue

// to install 3P pacakge use -go get- command

//this changes the mod file an makes an entry for the 3P paclage


// pointers basically store mem address of the some_value
// when you pass a variable to a fucntion a copy of that variable is created in the memmory and that is updated 
// so if there is large data if you pass it a copy of that data will be created that might cause memory issue

// if a vairble is a pointer its dtype will have *dtype


// & --> gives you the address for that memory location
// * --> gives the value at that address

// pointer = &varibale_name 
// value = *pointer

// can't perform pointer artthmatic


// Structs 

// to group related data into a single value

// steps:
1. create a custom type using type keyword
2. ex. type User
3. customs types should be a Structs type User struct


// fucntions attahced to a struc are called methods

// structs are kind of objects..after attaching the fucntion to the struct
// you dont need to pass struct to the methods
// instead just call it on the instantiated struct 

// to attach a function we use a syntax
// func (vname strut_type) fucn_name (params..) {}
// this is called as receiver

// this receiver works as parameter..it creates a copy in the methods
// so we dont mutute the orignal struct
// So pass it as a pointer

//constuctor is just a utlity funciton responsible for creatiing a struct
// its a normal fucntion not assoiciated with the struct

//scan does not stop scannig on next line